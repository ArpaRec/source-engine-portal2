void __cdecl C_BaseProjectedEntity::TestForReflectPaint(C_BaseProjectedEntity *const this)
{
  float *v2; // esi
  float *v3; // eax
  float *v4; // eax
  vec_t *v5; // eax
  bool v6; // dl
  vec_t v7; // xmm0_4
  vec_t v8; // edx
  vec_t v9; // eax
  float v10; // xmm4_4
  float v11; // xmm0_4
  unsigned int m_Index; // edx
  char *v13; // ecx
  C_BaseProjectedEntity *v14; // edx
  CBaseProjector *v15; // edi
  unsigned int v16; // ecx
  char *v17; // eax
  float v18; // [esp+2Ch] [ebp-1BCh]
  float v19; // [esp+30h] [ebp-1B8h]
  float v20; // [esp+30h] [ebp-1B8h]
  float v21; // [esp+40h] [ebp-1A8h]
  float v22; // [esp+40h] [ebp-1A8h]
  float v23; // [esp+50h] [ebp-198h]
  float v24; // [esp+50h] [ebp-198h]
  trace_t tr; // [esp+7Ch] [ebp-16Ch] BYREF
  Ray_t ray; // [esp+D0h] [ebp-118h] BYREF
  matrix3x4_t matRotation; // [esp+128h] [ebp-C0h] BYREF
  CTraceFilterSimpleClassnameList traceFilter; // [esp+158h] [ebp-90h] BYREF
  Vector vDir; // [esp+17Ch] [ebp-6Ch] BYREF
  Vector vNewProjectedEntityOrigin; // [esp+188h] [ebp-60h] BYREF
  Vector vOldDir; // [esp+194h] [ebp-54h] BYREF
  Vector vOldUp; // [esp+1A0h] [ebp-48h] BYREF
  Vector vRotAxis; // [esp+1ACh] [ebp-3Ch] BYREF
  Vector vNewUp; // [esp+1B8h] [ebp-30h] BYREF
  QAngle qNewProjectedEntityAngles; // [esp+1C4h] [ebp-24h] BYREF

  ray.m_pWorldAxisTransform = 0;
  v2 = (float *)(*((int (__cdecl **)(C_BaseProjectedEntity *const))this->_vptr_IHandleEntity + 236))(this);
  v3 = (float *)(*((int (__cdecl **)(C_BaseProjectedEntity *const))this->_vptr_IHandleEntity + 237))(this);
  v23 = (float)(*v3 - *v2) + (float)(*v3 - *v2);
  v21 = (float)(v3[1] - v2[1]) + (float)(v3[1] - v2[1]);
  v19 = (float)(v3[2] - v2[2]) + (float)(v3[2] - v2[2]);
  v4 = (float *)(*((int (__cdecl **)(C_BaseProjectedEntity *const))this->_vptr_IHandleEntity + 236))(this);
  v24 = v23 + *v4;
  v22 = v21 + v4[1];
  v20 = v19 + v4[2];
  v5 = (vec_t *)(*((int (__cdecl **)(C_BaseProjectedEntity *const))this->_vptr_IHandleEntity + 236))(this);
  v6 = 1;
  ray.m_Delta.x = v24 - *v5;
  ray.m_Delta.y = v22 - v5[1];
  v7 = v20 - v5[2];
  ray.m_IsRay = 1;
  ray.m_pWorldAxisTransform = 0;
  ray.m_Delta.z = v7;
  memset(&ray.m_Extents, 0, 12);
  memset(&ray.m_StartOffset, 0, 12);
  if ( (float)((float)((float)(ray.m_Delta.x * ray.m_Delta.x) + (float)(ray.m_Delta.y * ray.m_Delta.y))
             + (float)(v7 * v7)) == 0.0 )
    v6 = 0;
  ray.m_IsSwept = v6;
  ray.m_Start.x = *v5;
  v8 = v5[1];
  v9 = v5[2];
  ray.m_Start.y = v8;
  ray.m_Start.z = v9;
  CTraceFilterSimpleClassnameList::CTraceFilterSimpleClassnameList(&traceFilter, this, 0);
  UTil_ProjectedEntity_Trace_Filter(&traceFilter);
  UTIL_ClearTrace(&tr);
  (*(void (__cdecl **)(IEngineTrace *, Ray_t *, int, CTraceFilterSimpleClassnameList *, trace_t *))(*(_DWORD *)enginetrace
                                                                                                  + 20))(
    enginetrace,
    &ray,
    16395,
    &traceFilter,
    &tr);
  if ( r_visualizetraces.m_pParent->m_Value.m_nValue )
    DebugDrawLine(&tr.startpos, &tr.endpos, 255, 0, 0, 1, -1.0);
  if ( UTIL_Paint_Reflect(&tr, &vNewProjectedEntityOrigin, &vDir, REFLECT_POWER) )
  {
    (*((void (__cdecl **)(C_BaseProjectedEntity *const, Vector *, _DWORD, Vector *))this->_vptr_IHandleEntity + 114))(
      this,
      &vOldDir,
      0,
      &vOldUp);
    vRotAxis.x = (float)(vOldDir.y * vDir.z) - (float)(vDir.y * vOldDir.z);
    vRotAxis.y = (float)(vDir.x * vOldDir.z) - (float)(vOldDir.x * vDir.z);
    v10 = (float)((float)(vDir.x * vOldDir.x) + (float)(vOldDir.y * vDir.y)) + (float)(vDir.z * vOldDir.z);
    v11 = 180.0;
    vRotAxis.z = (float)(vOldDir.x * vDir.y) - (float)(vOldDir.y * vDir.x);
    if ( v10 >= -1.0 )
    {
      v11 = 0.0;
      if ( v10 <= 1.0 )
      {
        v18 = acosf((float)((float)(vDir.x * vOldDir.x) + (float)(vOldDir.y * vDir.y)) + (float)(vDir.z * vOldDir.z));
        v11 = v18 * 57.295776;
      }
    }
    MatrixBuildRotationAboutAxis(&vRotAxis, v11, &matRotation);
    VectorRotate(&vOldUp.x, &matRotation, &vNewUp.x);
    VectorAngles(&vDir, &vNewUp, &qNewProjectedEntityAngles);
    m_Index = this->m_hChildSegment.m_Index;
    if ( m_Index != -1 )
    {
      v13 = (char *)g_pEntityList + 16 * (unsigned __int16)m_Index;
      if ( *((_DWORD *)v13 + 2) == HIWORD(m_Index) )
      {
        v14 = (C_BaseProjectedEntity *)*((_DWORD *)v13 + 1);
        if ( v14 )
        {
          v15 = 0;
          v16 = this->m_hOwnerEntity.m_Index;
          if ( v16 != -1 )
          {
            v17 = (char *)g_pEntityList + 16 * (unsigned __int16)v16;
            if ( *((_DWORD *)v17 + 2) == HIWORD(v16) )
              v15 = (CBaseProjector *)*((_DWORD *)v17 + 1);
          }
          C_BaseProjectedEntity::RecursiveProjection(
            v14,
            0,
            v15,
            0,
            &vNewProjectedEntityOrigin,
            &qNewProjectedEntityAngles,
            this->m_iMaxRemainingRecursions - 1,
            this->m_bCreatePlacementHelper);
        }
      }
    }
  }
  traceFilter.m_PassClassnames.m_Size = 0;
  traceFilter._vptr_ITraceFilter = (int (**)(...))&off_11FA768;
  if ( traceFilter.m_PassClassnames.m_Memory.m_nGrowSize >= 0 )
  {
    if ( traceFilter.m_PassClassnames.m_Memory.m_pMemory )
      (*(void (__cdecl **)(_DWORD, const char **))(*g_pMemAlloc + 8))(
        g_pMemAlloc,
        traceFilter.m_PassClassnames.m_Memory.m_pMemory);
  }
}