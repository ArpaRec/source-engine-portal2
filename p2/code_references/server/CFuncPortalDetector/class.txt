class CFuncPortalDetector : public CBaseEntity
{
    public void CFuncPortalDetector(class CFuncPortalDetector & );
    public void CFuncPortalDetector();
    public void ~CFuncPortalDetector();
    public void Spawn();
    public void SetActive(bool );
    public void InputDisable(struct inputdata_t & );
    public void InputEnable(struct inputdata_t & );
    public void InputToggle(struct inputdata_t & );
    public void NotifyPortalEvent(enum PortalEvent_t ,class CPortal_Base2D * );
    public void UpdateOnPortalMoved(class CProp_Portal * );
    public void UpdateOnPortalActivated(class CProp_Portal * );
    public bool IsActive();
    public int GetLinkageGroupID();
    public class COutputEvent m_OnStartTouchPortal;
    public class COutputEvent m_OnStartTouchPortal1;
    public class COutputEvent m_OnStartTouchPortal2;
    public class COutputEvent m_OnStartTouchLinkedPortal;
    public class COutputEvent m_OnStartTouchBothLinkedPortals;
    public class COutputEvent m_OnEndTouchPortal;
    public class COutputEvent m_OnEndTouchPortal1;
    public class COutputEvent m_OnEndTouchPortal2;
    public class COutputEvent m_OnEndTouchLinkedPortal;
    public class COutputEvent m_OnEndTouchBothLinkedPortals;
    public struct datamap_t m_DataMap;
    public struct datamap_t * GetBaseMap();
    public struct datamap_t * GetDataDescMap();
    public class CFuncPortalDetector * m_pNext;
    public bool IsPortalTouchingDetector(class CProp_Portal * );
    protected void PortalPlacedInsideBounds(class CProp_Portal * );
    protected void PortalRemovedFromInsideBounds(class CProp_Portal * );
    protected bool m_bActive;
    protected int m_iLinkageGroupID;
    protected bool m_bCheckAllIDs;
    protected class CHandle<CBaseEntity> m_phTouchingPortals[2];
    protected int m_iTouchingPortalCount;
    public class CFuncPortalDetector & operator=(class CFuncPortalDetector & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};