void __cdecl Blobulator::Paintblob_DrawFastSphere(int meshBuilder, const Vector *center, float radius)
{
  float *v4; // edi
  int v5; // edx
  __m128 v6; // xmm7
  __m128 v7; // xmm2
  int v8; // ecx
  __m128 v9; // xmm3
  __m128 v10; // xmm4
  __m128 v11; // xmm5
  __m128 *v12; // ecx
  __m128 v13; // xmm0
  __m128 v14; // xmm1
  bool v15; // al
  __m128 v16; // xmm6
  __m128 v17; // xmm0
  int v18; // eax
  int v19; // eax
  int v20; // edx
  __m128 v21; // xmm0
  float *v22; // eax
  float *v23; // eax
  float *v24; // eax
  int *v25; // eax
  int v26; // ecx
  int v27; // ecx
  int v28; // ecx
  int v29; // ecx
  int v30; // ecx
  unsigned __int16 v31; // dx
  int v32; // ecx
  __m128 pos; // [esp+8h] [ebp-20h]
  int v34; // [esp+24h] [ebp-4h]
  int offset; // [esp+30h] [ebp+8h]

  offset = *(_DWORD *)(meshBuilder + 424);
  v4 = &Blobulator::g_FastSpherePosData[0][6];
  do
  {
    v5 = Blobulator::g_nNumberOfMatrices;
    v6 = Four_Zeros;
    pos.m128_f32[0] = (float)(*(v4 - 6) + center->x) + (float)(radius * *(v4 - 1));
    pos.m128_f32[1] = (float)(*(v4 - 5) + center->y) + (float)(*v4 * radius);
    pos.m128_f32[2] = (float)(*(v4 - 4) + center->z) + (float)(v4[1] * radius);
    v7 = pos;
    v8 = 0;
    v9 = _mm_shuffle_ps(pos, pos, 0);
    v10 = _mm_shuffle_ps(pos, pos, 85);
    v11 = _mm_shuffle_ps(pos, pos, 170);
    v34 = 0;
    if ( Blobulator::g_nNumberOfMatrices >= 2 )
    {
      v12 = (__m128 *)&xmmword_10A24ED0;
      do
      {
        v13 = _mm_add_ps(
                _mm_add_ps(_mm_add_ps(_mm_mul_ps(v12[-1], v9), v12[-2]), _mm_mul_ps(v10, *v12)),
                _mm_mul_ps(v12[1], v11));
        v14 = _mm_add_ps(
                _mm_add_ps(_mm_add_ps(_mm_mul_ps(v12[3], v9), v12[2]), _mm_mul_ps(v12[4], v10)),
                _mm_mul_ps(v12[5], v11));
        v6 = Four_Zeros;
        v15 = _mm_movemask_ps(
                _mm_cmpeq_ps(
                  _mm_or_ps(_mm_cmplt_ps(v13, s_ExclusionBoxMin_0), _mm_cmplt_ps(s_ExclusionBoxMax_0, v13)),
                  Four_Zeros)) == 15;
        if ( v15 | (_mm_movemask_ps(
                      _mm_cmpeq_ps(
                        _mm_or_ps(_mm_cmplt_ps(v14, s_ExclusionBoxMin_0), _mm_cmplt_ps(s_ExclusionBoxMax_0, v14)),
                        Four_Zeros)) == 15) )
        {
          if ( v15 )
          {
            v16 = _mm_shuffle_ps(v13, v13, 85);
            v17 = _mm_shuffle_ps(v13, v13, 170);
            v18 = 0;
          }
          else
          {
            v16 = _mm_shuffle_ps(v14, v14, 85);
            v17 = _mm_shuffle_ps(v14, v14, 170);
            v18 = 1;
          }
          v7 = _mm_add_ps(
                 _mm_add_ps(
                   _mm_mul_ps(Blobulator::g_TransposedPortalMatrices[v34 + v18].m_ColumnY, v16),
                   Blobulator::g_TransposedPortalMatrices[v34 + v18].m_Translation),
                 _mm_mul_ps(Blobulator::g_TransposedPortalMatrices[v34 + v18].m_ColumnZ, v17));
        }
        v5 = Blobulator::g_nNumberOfMatrices;
        v34 += 2;
        v12 += 8;
      }
      while ( v34 + 2 <= Blobulator::g_nNumberOfMatrices );
      v8 = v34;
    }
    if ( v8 < v5 )
    {
      v19 = v8 << 6;
      v20 = v5 - v8;
      do
      {
        v21 = _mm_add_ps(
                _mm_add_ps(
                  _mm_add_ps(
                    _mm_mul_ps(*(__m128 *)((char *)&xmmword_10A24EC0 + v19), v9),
                    *(__m128 *)((char *)&Blobulator::g_TransposedInvertedPortalMatrices[0].m_Translation + v19)),
                  _mm_mul_ps(*(__m128 *)((char *)&xmmword_10A24ED0 + v19), v10)),
                _mm_mul_ps(*(__m128 *)((char *)&xmmword_10A24EE0 + v19), v11));
        if ( _mm_movemask_ps(
               _mm_cmpeq_ps(
                 _mm_or_ps(_mm_cmplt_ps(v21, s_ExclusionBoxMin_0), _mm_cmplt_ps(s_ExclusionBoxMax_0, v21)),
                 v6)) == 15 )
          v7 = _mm_add_ps(
                 _mm_add_ps(
                   _mm_mul_ps(_mm_shuffle_ps(v21, v21, 85), *(__m128 *)((char *)&xmmword_10A24DD0 + v19)),
                   *(__m128 *)((char *)&Blobulator::g_TransposedPortalMatrices[0].m_Translation + v19)),
                 _mm_mul_ps(_mm_shuffle_ps(v21, v21, 170), *(__m128 *)((char *)&xmmword_10A24DE0 + v19)));
        v19 += 64;
        --v20;
      }
      while ( v20 );
    }
    v22 = *(float **)(meshBuilder + 428);
    *v22 = v7.m128_f32[0];
    *((_DWORD *)v22 + 1) = _mm_shuffle_ps(v7, v7, 57).m128_u32[0];
    *((_DWORD *)v22 + 2) = _mm_shuffle_ps(v7, v7, 78).m128_u32[0];
    v23 = *(float **)(meshBuilder + 432);
    *v23 = *(v4 - 1);
    v23[1] = *v4;
    v23[2] = v4[1];
    v24 = *(float **)(meshBuilder + 440);
    *v24 = *(v4 - 3);
    v24[1] = *(v4 - 2);
    **(_DWORD **)(meshBuilder + 436) = LOBYTE(FLOAT_8388863_0) | ((LOBYTE(FLOAT_8388863_0) | ((LOBYTE(FLOAT_8388863_0) | 0xFFFFFF00) << 8)) << 8);
    CVertexBuilder::AdvanceVertex((CVertexBuilder *)(meshBuilder + 244));
    v4 += 8;
  }
  while ( (int)v4 < (int)Blobulator::g_FastSphereTriData[2] );
  v25 = &Blobulator::g_FastSphereTriData[0][1];
  do
  {
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * *(_DWORD *)(meshBuilder + 224)) = offset
                                                                                    + *(_WORD *)(meshBuilder + 220)
                                                                                    + *((_WORD *)v25 - 2);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    v26 = *(_DWORD *)(meshBuilder + 224);
    *(_DWORD *)(meshBuilder + 216) = v26;
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * v26) = offset + *(_WORD *)(meshBuilder + 220) + *(_WORD *)v25;
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    *(_DWORD *)(meshBuilder + 216) = *(_DWORD *)(meshBuilder + 224);
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * *(_DWORD *)(meshBuilder + 224)) = offset
                                                                                    + *(_WORD *)(meshBuilder + 220)
                                                                                    + *((_WORD *)v25 + 2);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    v27 = *(_DWORD *)(meshBuilder + 224);
    *(_DWORD *)(meshBuilder + 216) = v27;
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * v27) = offset + *(_WORD *)(meshBuilder + 220) + *((_WORD *)v25 + 4);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    *(_DWORD *)(meshBuilder + 216) = *(_DWORD *)(meshBuilder + 224);
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * *(_DWORD *)(meshBuilder + 224)) = offset
                                                                                    + *(_WORD *)(meshBuilder + 220)
                                                                                    + *((_WORD *)v25 + 6);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    v28 = *(_DWORD *)(meshBuilder + 224);
    *(_DWORD *)(meshBuilder + 216) = v28;
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * v28) = offset + *(_WORD *)(meshBuilder + 220) + *((_WORD *)v25 + 8);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    *(_DWORD *)(meshBuilder + 216) = *(_DWORD *)(meshBuilder + 224);
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * *(_DWORD *)(meshBuilder + 224)) = offset
                                                                                    + *(_WORD *)(meshBuilder + 220)
                                                                                    + *((_WORD *)v25 + 10);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    v29 = *(_DWORD *)(meshBuilder + 224);
    *(_DWORD *)(meshBuilder + 216) = v29;
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * v29) = offset + *(_WORD *)(meshBuilder + 220) + *((_WORD *)v25 + 12);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    *(_DWORD *)(meshBuilder + 216) = *(_DWORD *)(meshBuilder + 224);
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * *(_DWORD *)(meshBuilder + 224)) = offset
                                                                                    + *(_WORD *)(meshBuilder + 220)
                                                                                    + *((_WORD *)v25 + 14);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    v30 = *(_DWORD *)(meshBuilder + 224);
    *(_DWORD *)(meshBuilder + 216) = v30;
    v31 = offset + *(_WORD *)(meshBuilder + 220) + *((_WORD *)v25 + 16);
    v25 += 12;
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * v30) = v31;
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    *(_DWORD *)(meshBuilder + 216) = *(_DWORD *)(meshBuilder + 224);
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * *(_DWORD *)(meshBuilder + 224)) = offset
                                                                                    + *(_WORD *)(meshBuilder + 220)
                                                                                    + *((_WORD *)v25 - 6);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    v32 = *(_DWORD *)(meshBuilder + 224);
    *(_DWORD *)(meshBuilder + 216) = v32;
    *(_WORD *)(*(_DWORD *)(meshBuilder + 192) + 2 * v32) = offset + *(_WORD *)(meshBuilder + 220) + *((_WORD *)v25 - 4);
    *(_DWORD *)(meshBuilder + 224) += *(_DWORD *)(meshBuilder + 204);
    *(_DWORD *)(meshBuilder + 216) = *(_DWORD *)(meshBuilder + 224);
  }
  while ( (int)v25 < (int)&vec2_invalid_167.y );
}